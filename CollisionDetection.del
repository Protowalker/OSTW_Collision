import "LiveVarEditLib.del";

globalvar define planeForCollision = 5;
playervar define lastPosition;

macro prediction: GetVariable(0);
macro tickRate: GetVariable(1);

globalvar define AABBs = [];

rule: "Draw Line"
Event.OngoingGlobal
{
    CreateHudText(HostPlayer(), EyePosition(HostPlayer()), Null(), Null(), Location.Right, 0, Color.White, Color.White, Color.White, StringRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateBeamEffect(AllPlayers(), BeamType.BadBeam, Vector(100,2,planeForCollision), Vector(-100,2,planeForCollision), Color.White, EffectRev.VisibleToPositionAndRadius);
    CreateMenuOptionFloat("Prediction", 0, 1, 0.1, 0.3);
    CreateMenuOptionFloat("Tick Rate", 1, 32, 10, 100);
}

rule: "Toggle UI"
Event.OngoingPlayer
if(HostPlayer() == EventPlayer() && IsButtonHeld(EventPlayer(), Button.Crouch) && IsButtonHeld(EventPlayer(), Button.Interact)){
    ToggleUI();
}

rule:"Create Box"
Event.OngoingPlayer
if(IsButtonHeld(EventPlayer(), Button.Interact)){
    AABB testBox;
    testBox.topbackleft = PositionOf(EventPlayer())+Vector(-5,5,-5);
    testBox.bottomfrontright = PositionOf(EventPlayer())-Vector(-5,5,-5);
    testBox.createLines();

}

// rule: "Try to undo momentum"
// Event.OngoingPlayer
// {


//     lastPosition = PositionOf(EventPlayer());
//     Wait(tickRate/1000);
//     Loop();
// }


method StopMomentum(ref define player){
        ApplyImpulse(player, Down(), 0.001, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(player, Up(), 0.001, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(player, Left(), 0.001, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(player, Right(), 0.001, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(player, Forward(), 0.001, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(player, Backward(), 0.001, Relative.ToWorld, ContraryMotion.Cancel);
}

method ConstrainPlayerToPlane(ref define normal, ref define position, ref define player){
        StopMomentum(player);
        Wait(0.005);
        define pointOnPlane = ProjectPointToPlane(normal, position, PositionOf(player),Vector(1,0,0));
        Teleport(EventPlayer(), position+pointOnPlane);
}

macro ProjectPointToPlane(ref define normal,ref define position, ref define point, ref define xAxis): Vector(DotProduct(point-position, xAxis),0,DotProduct(point-position,CrossProduct(normal, xAxis)));


struct AABB {
    public define topbackleft;
    public define bottomfrontright;

    public macro IsColliding(define point): XOf(topbackleft) < XOf(point) < XOf(bottomfrontright) && YOf(topbackleft) > YOf(point) > YOf(bottomfrontright) && ZOf(topbackleft) < ZOf(point) < ZOf(bottomfrontright);
    public method createLines(){
        define size = topbackleft-bottomfrontright;
        define center = topbackleft - size/2;
    
        size = Vector(AbsoluteValue(XOf(size)),AbsoluteValue(YOf(size)),AbsoluteValue(ZOf(size)));
        CreateBeamEffect(AllPlayers(), BeamType.BadBeam, topbackleft, bottomfrontright, Color.White, EffectRev.VisibleToPositionAndRadius);
        CreateBeamEffect(AllPlayers(), BeamType.BadBeam, center + Vector(-XOf(size)/2,-YOf(size/2),-ZOf(size/2)), center -  Vector(-XOf(size)/2,-YOf(size/2),-ZOf(size/2)), Color.White, EffectRev.PositionAndRadius);
        CreateBeamEffect(AllPlayers(), BeamType.BadBeam, center - Vector(0,0,ZOf(size)/2), center + Vector(0,0, ZOf(size)/2), Color.White, EffectRev.PositionAndRadius);
        BigMessage(EventPlayer(), size);
    }
}